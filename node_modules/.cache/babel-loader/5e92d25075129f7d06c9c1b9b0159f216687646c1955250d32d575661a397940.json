{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Helper method to get auth headers\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    };\n  }\n\n  // Generic request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.getAuthHeaders()\n      },\n      ...options\n    };\n    try {\n      console.log('Making request to:', url, 'with config:', config);\n      const response = await fetch(url, config);\n      let data;\n      try {\n        data = await response.json();\n      } catch (e) {\n        console.error('Failed to parse JSON response:', e);\n        throw new Error('Invalid server response');\n      }\n      if (!response.ok) {\n        var _data;\n        // Use the server's error message if available\n        const errorMessage = ((_data = data) === null || _data === void 0 ? void 0 : _data.message) || 'Request failed';\n        console.error('Server error:', data);\n        throw new Error(errorMessage);\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Authentication API\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n  async updateProfile(profileData) {\n    return this.request('/auth/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n  async logout() {\n    return this.request('/auth/logout', {\n      method: 'POST'\n    });\n  }\n\n  // Posts API\n  async getPosts(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/posts${queryString ? `?${queryString}` : ''}`);\n  }\n  async getPost(id) {\n    return this.request(`/posts/${id}`);\n  }\n  async createPost(postData) {\n    return this.request('/posts', {\n      method: 'POST',\n      body: JSON.stringify(postData)\n    });\n  }\n  async updatePost(id, postData) {\n    return this.request(`/posts/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(postData)\n    });\n  }\n  async deletePost(id) {\n    return this.request(`/posts/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async likePost(id) {\n    return this.request(`/posts/${id}/like`, {\n      method: 'POST'\n    });\n  }\n  async bookmarkPost(id) {\n    return this.request(`/posts/${id}/bookmark`, {\n      method: 'POST'\n    });\n  }\n  async addComment(id, content) {\n    return this.request(`/posts/${id}/comment`, {\n      method: 'POST',\n      body: JSON.stringify({\n        content\n      })\n    });\n  }\n\n  // Users API\n  async getUser(userId) {\n    return this.request(`/users/${userId}`);\n  }\n  async getUserPosts(userId, params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/users/${userId}/posts${queryString ? `?${queryString}` : ''}`);\n  }\n  async followUser(userId) {\n    return this.request(`/users/${userId}/follow`, {\n      method: 'POST'\n    });\n  }\n  async getFollowers(userId) {\n    return this.request(`/users/${userId}/followers`);\n  }\n  async getFollowing(userId) {\n    return this.request(`/users/${userId}/following`);\n  }\n  async getLikedPosts(userId, params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/users/${userId}/liked-posts${queryString ? `?${queryString}` : ''}`);\n  }\n  async getBookmarkedPosts(userId, params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/users/${userId}/bookmarked-posts${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Search API\n  async search(query, params = {}) {\n    const searchParams = {\n      q: query,\n      ...params\n    };\n    const queryString = new URLSearchParams(searchParams).toString();\n    return this.request(`/search${queryString ? `?${queryString}` : ''}`);\n  }\n  async getTags(limit = 20) {\n    return this.request(`/search/tags?limit=${limit}`);\n  }\n  async getSuggestions(query) {\n    return this.request(`/search/suggestions?q=${encodeURIComponent(query)}`);\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","getAuthHeaders","token","localStorage","getItem","Authorization","request","endpoint","options","url","config","headers","console","log","response","fetch","data","json","e","error","Error","ok","_data","errorMessage","message","register","userData","method","body","JSON","stringify","login","credentials","getCurrentUser","updateProfile","profileData","logout","getPosts","params","queryString","URLSearchParams","toString","getPost","id","createPost","postData","updatePost","deletePost","likePost","bookmarkPost","addComment","content","getUser","userId","getUserPosts","followUser","getFollowers","getFollowing","getLikedPosts","getBookmarkedPosts","search","query","searchParams","q","getTags","limit","getSuggestions","encodeURIComponent","healthCheck","apiService"],"sources":["C:/Users/Suriyaprakash/OneDrive/Desktop/Blog/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // Helper method to get auth headers\r\n  getAuthHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` })\r\n    };\r\n  }\r\n\r\n  // Generic request method\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...this.getAuthHeaders(),\r\n      },\r\n      ...options\r\n    };\r\n\r\n    try {\r\n      console.log('Making request to:', url, 'with config:', config);\r\n      const response = await fetch(url, config);\r\n      let data;\r\n      \r\n      try {\r\n        data = await response.json();\r\n      } catch (e) {\r\n        console.error('Failed to parse JSON response:', e);\r\n        throw new Error('Invalid server response');\r\n      }\r\n\r\n      if (!response.ok) {\r\n        // Use the server's error message if available\r\n        const errorMessage = data?.message || 'Request failed';\r\n        console.error('Server error:', data);\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Authentication API\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials)\r\n    });\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    return this.request('/auth/me');\r\n  }\r\n\r\n  async updateProfile(profileData) {\r\n    return this.request('/auth/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData)\r\n    });\r\n  }\r\n\r\n  async logout() {\r\n    return this.request('/auth/logout', {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  // Posts API\r\n  async getPosts(params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/posts${queryString ? `?${queryString}` : ''}`);\r\n  }\r\n\r\n  async getPost(id) {\r\n    return this.request(`/posts/${id}`);\r\n  }\r\n\r\n  async createPost(postData) {\r\n    return this.request('/posts', {\r\n      method: 'POST',\r\n      body: JSON.stringify(postData)\r\n    });\r\n  }\r\n\r\n  async updatePost(id, postData) {\r\n    return this.request(`/posts/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(postData)\r\n    });\r\n  }\r\n\r\n  async deletePost(id) {\r\n    return this.request(`/posts/${id}`, {\r\n      method: 'DELETE'\r\n    });\r\n  }\r\n\r\n  async likePost(id) {\r\n    return this.request(`/posts/${id}/like`, {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  async bookmarkPost(id) {\r\n    return this.request(`/posts/${id}/bookmark`, {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  async addComment(id, content) {\r\n    return this.request(`/posts/${id}/comment`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ content })\r\n    });\r\n  }\r\n\r\n  // Users API\r\n  async getUser(userId) {\r\n    return this.request(`/users/${userId}`);\r\n  }\r\n\r\n  async getUserPosts(userId, params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/users/${userId}/posts${queryString ? `?${queryString}` : ''}`);\r\n  }\r\n\r\n  async followUser(userId) {\r\n    return this.request(`/users/${userId}/follow`, {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  async getFollowers(userId) {\r\n    return this.request(`/users/${userId}/followers`);\r\n  }\r\n\r\n  async getFollowing(userId) {\r\n    return this.request(`/users/${userId}/following`);\r\n  }\r\n\r\n  async getLikedPosts(userId, params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/users/${userId}/liked-posts${queryString ? `?${queryString}` : ''}`);\r\n  }\r\n\r\n  async getBookmarkedPosts(userId, params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/users/${userId}/bookmarked-posts${queryString ? `?${queryString}` : ''}`);\r\n  }\r\n\r\n  // Search API\r\n  async search(query, params = {}) {\r\n    const searchParams = { q: query, ...params };\r\n    const queryString = new URLSearchParams(searchParams).toString();\r\n    return this.request(`/search${queryString ? `?${queryString}` : ''}`);\r\n  }\r\n\r\n  async getTags(limit = 20) {\r\n    return this.request(`/search/tags?limit=${limit}`);\r\n  }\r\n\r\n  async getSuggestions(query) {\r\n    return this.request(`/search/suggestions?q=${encodeURIComponent(query)}`);\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    return this.request('/health');\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst apiService = new ApiService();\r\nexport default apiService;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}